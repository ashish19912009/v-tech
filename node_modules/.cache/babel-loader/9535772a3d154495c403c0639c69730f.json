{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useScrollTo = void 0;\n\nvar React = __importStar(require(\"react\"));\n\nvar smoothscroll_polyfill_1 = __importDefault(require(\"smoothscroll-polyfill\"));\n/**\n * See documentation: [useScrollTo](https://justinmahar.github.io/react-use-window-scroll/useScrollTo)\n *\n * This hook scrolls the page to the specified page coordinates using the Window Web API's Window.scrollTo function. Smooth scrolling behavior (native to the browser) is supported by providing ScrollToOptions.\n *\n * @param options You can optionally provide the hook with `{ polyfillDisabled: true }` to disable the polyfill for browsers that don't natively support smooth scrolling. The polyfill is enabled by default and only patches browsers that lack support.\n *\n * @returns The hook returns an overloaded function that can take either a ScrollToOptions, or top and left, for scrolling the page to the provided page coordinates. Use the ScrollToOptions signature if you'd like to use smooth scrolling.\n */\n\n\nfunction useScrollTo(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _a = React.useState({}),\n      scrollToOptions = _a[0],\n      setScrollToOptions = _a[1];\n\n  var _b = React.useState(false),\n      shouldScroll = _b[0],\n      setShouldScroll = _b[1];\n\n  React.useEffect(function () {\n    if (shouldScroll && !!window) {\n      setShouldScroll(false);\n\n      var scrollToOptionsToUse = __assign(__assign({}, scrollToOptions), {\n        top: scrollToOptions.top ? scrollToOptions.top : 0,\n        left: scrollToOptions.left ? scrollToOptions.left : 0\n      });\n\n      if (!options.polyfillDisabled && !!scrollToOptionsToUse.behavior && scrollToOptionsToUse.behavior === 'smooth') {\n        try {\n          // Detect if the smooth scroll behavior is natively supported and take action only when necessary\n          smoothscroll_polyfill_1.default.polyfill();\n        } catch (e) {\n          console.error(e);\n        }\n      }\n\n      if (!!scrollToOptions && window.scroll) {\n        window.scroll(scrollToOptionsToUse);\n      } else if (window.scrollTo) {\n        window.scrollTo(scrollToOptionsToUse);\n      }\n    }\n  }, [shouldScroll, scrollToOptions, options.polyfillDisabled]);\n\n  var scrollTo = function (scrollToOptionsOrTop, left) {\n    if (scrollToOptionsOrTop === void 0) {\n      scrollToOptionsOrTop = {\n        top: 0,\n        left: 0\n      };\n    }\n\n    if (left === void 0) {\n      left = undefined;\n    }\n\n    if (typeof scrollToOptionsOrTop === 'number' && typeof left === 'number') {\n      var top_1 = scrollToOptionsOrTop;\n      setScrollToOptions({\n        top: top_1,\n        left: left\n      });\n      setShouldScroll(true);\n    } else if (typeof scrollToOptionsOrTop !== 'number') {\n      setScrollToOptions(scrollToOptionsOrTop);\n      setShouldScroll(true);\n    } else {\n      console.error('Invalid scroll param(s):', scrollToOptionsOrTop, left);\n    }\n  };\n\n  return scrollTo;\n}\n\nexports.useScrollTo = useScrollTo;","map":null,"metadata":{},"sourceType":"script"}